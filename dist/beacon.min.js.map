{
  "version": 3,
  "sources": ["../js/index.js"],
  "sourcesContent": ["const currentScript = document.getElementById(\"livewire-beacon\");\n\nconst channelName = currentScript.dataset.channel || \"beacon-channel\";\nconst inboundEvent = currentScript.dataset.inbound || \"BeaconInboundEvent\";\nconst outboundEvent = currentScript.dataset.outbound || \"BeaconOutboundEvent\";\n\nconst pendingCommits = new Map();\n\nconst shouldIntercept = () => {\n    if (\n        Echo.connector.pusher.connection &&\n        Echo.connector.pusher.connection.state === \"connected\" &&\n        Echo.connector.channels[channelName]\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\ndocument.addEventListener(\"livewire:init\", () => {\n    Livewire.hook(\"commit.pooling\", ({ commits }) => {\n        if (!shouldIntercept()) {\n            return;\n        }\n\n        Array.from(commits).forEach((commit) => {\n            commit.prepare();\n\n            const id = Math.random().toString(36);\n            const [payload, succeed, fail] = commit.toRequestPayload();\n\n            pendingCommits.set(id, { commit, succeed, fail });\n\n            return new Promise((resolve, reject) => {\n                Echo.connector.pusher.connection.send(\n                    JSON.stringify({\n                        event: inboundEvent,\n                        data: {\n                            id,\n                            payload,\n                        },\n                    })\n                );\n\n                resolve();\n            });\n        });\n\n        commits.clear();\n    });\n});\n\nconst channel = Echo.channel(channelName);\nchannel.listen(`.${outboundEvent}`, async (e) => {\n    const {\n        id,\n        result: { components, assets },\n    } = e;\n\n    await Livewire.triggerAsync(\"payload.intercept\", { components, assets });\n\n    if (!pendingCommits.get(id)) {\n        return;\n    }\n\n    const { succeed } = pendingCommits.get(id);\n\n    if (components.length > 0) {\n        succeed(components[0]);\n    }\n\n    pendingCommits.delete(id);\n});\n"],
  "mappings": "MAAA,IAAMA,EAAgB,SAAS,eAAe,iBAAiB,EAEzDC,EAAcD,EAAc,QAAQ,SAAW,iBAC/CE,EAAeF,EAAc,QAAQ,SAAW,qBAChDG,EAAgBH,EAAc,QAAQ,UAAY,sBAElDI,EAAiB,IAAI,IAErBC,EAAkB,IAEhB,QAAK,UAAU,OAAO,YACtB,KAAK,UAAU,OAAO,WAAW,QAAU,aAC3C,KAAK,UAAU,SAASJ,IAQhC,SAAS,iBAAiB,gBAAiB,IAAM,CAC7C,SAAS,KAAK,iBAAkB,CAAC,CAAE,QAAAK,CAAQ,IAAM,CACzC,CAACD,EAAgB,IAIrB,MAAM,KAAKC,CAAO,EAAE,QAASC,GAAW,CACpCA,EAAO,QAAQ,EAEf,IAAMC,EAAK,KAAK,OAAO,EAAE,SAAS,EAAE,EAC9B,CAACC,EAASC,EAASC,CAAI,EAAIJ,EAAO,iBAAiB,EAEzD,OAAAH,EAAe,IAAII,EAAI,CAAE,OAAAD,EAAQ,QAAAG,EAAS,KAAAC,CAAK,CAAC,EAEzC,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,KAAK,UAAU,OAAO,WAAW,KAC7B,KAAK,UAAU,CACX,MAAOX,EACP,KAAM,CACF,GAAAM,EACA,QAAAC,CACJ,CACJ,CAAC,CACL,EAEAG,EAAQ,CACZ,CAAC,CACL,CAAC,EAEDN,EAAQ,MAAM,EAClB,CAAC,CACL,CAAC,EAED,IAAMQ,EAAU,KAAK,QAAQb,CAAW,EACxCa,EAAQ,OAAO,IAAIX,IAAiB,MAAOY,GAAM,CAC7C,GAAM,CACF,GAAAP,EACA,OAAQ,CAAE,WAAAQ,EAAY,OAAAC,CAAO,CACjC,EAAIF,EAIJ,GAFA,MAAM,SAAS,aAAa,oBAAqB,CAAE,WAAAC,EAAY,OAAAC,CAAO,CAAC,EAEnE,CAACb,EAAe,IAAII,CAAE,EACtB,OAGJ,GAAM,CAAE,QAAAE,CAAQ,EAAIN,EAAe,IAAII,CAAE,EAErCQ,EAAW,OAAS,GACpBN,EAAQM,EAAW,EAAE,EAGzBZ,EAAe,OAAOI,CAAE,CAC5B,CAAC",
  "names": ["currentScript", "channelName", "inboundEvent", "outboundEvent", "pendingCommits", "shouldIntercept", "commits", "commit", "id", "payload", "succeed", "fail", "resolve", "reject", "channel", "e", "components", "assets"]
}
